enum CardState {
  NEW
  LEARNING
  RELEARNING
  GRADUATED
}

type NewCardsToday {
  date: Date
  numCards: Int
}

type Card {
  _id: String
  front: String
  back: String
  state: CardState
  easeFactor: Float
  currentInterval: Float
  dueDate: Date
  currentStep: Int
  lapseCount: Int
  createdAt: Date
}

type Deck {
  _id: String
  name: String
  createdAt: Date
  userId: String
  intervalModifier: Float
  cards: [Card]
  numCards: Int
  newCards: Int
  learningCards: Int
  relearningCards: Int
  graduatedCards: Int
  newCardsToday: NewCardsToday
}

type CardConnection {
  cardsList: [Card]!
  cardsCount: Int!
}

extend type Query {
  decks: [Deck]
  nextCardForLearning(deckId: String!): Card
  deckQuery(deckId: String!): Deck
  cardsForDeck(deckId: String!, pageNum: Int, perPage: Int, q: String, sort: String, order: String): CardConnection!
}

extend type Mutation {
  createDeck(name: String!): Deck
  deleteDeck(deckId: String!): Boolean
  addCard(deckId: String!, front: String!, back: String!): Deck
  answerCard(cardId: String!, answer: String!): Card
  deleteCard(cardId: String!): Boolean
  updateCard(cardId: String!, front: String!, back: String!): Card
  resetCard(cardId: String!): Card
  resetDeck(deckId: String!): Deck
  renameDeck(deckId: String!, name: String!): Deck
}
